.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Das::BioSQL::Segment 3"
.TH Bio::DB::Das::BioSQL::Segment 3 "2009-04-23" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Das::BioSQL::Segment \- DAS\-style access to a BioSQL database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Get a Bio::Das::SegmentI object from a Bio::DB::Das::BioSQL database...
.Ve
.PP
.Vb 1
\&  #Should be created through Bio::DB::Das::BioSQL.
.Ve
.PP
.Vb 2
\&  @features = $segment\->overlapping_features(\-type=>[\(aqtype1\(aq,\(aqtype2\(aq]);
\&  # each feature is a Bio::SeqFeatureI\-compliant object
.Ve
.PP
.Vb 1
\&  @features = $segment\->contained_features(\-type=>[\(aqtype1\(aq,\(aqtype2\(aq]);
.Ve
.PP
.Vb 1
\&  @features = $segment\->contained_in(\-type=>[\(aqtype1\(aq,\(aqtype2\(aq]);
.Ve
.PP
.Vb 4
\&  $stream = $segment\->get_feature_stream(\-type=>[\(aqtype1\(aq,\(aqtype2\(aq,\(aqtype3\(aq];
\&  while (my $feature = $stream\->next_seq) {
\&     # do something with feature
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::Das::BioSQL::Segment is a simplified alternative interface to
sequence annotation databases used by the distributed annotation
system. In this scheme, the genome is represented as a series of
landmarks.  Each Bio::DB::Das::BioSQL::Segment object (\*(L"segment\*(R") corresponds
to a genomic region defined by a landmark and a start and end position
relative to that landmark.  A segment is created using the Bio::DB::Das::BioSQL
\&\fIsegment()\fR method.
.PP
The segment will load its features only when the \fIfeatures()\fR method is called.
If start and end are not specified and features are requested, all the features
for the current segment will be retrieved, which may be slow.
.PP
Segment can be created as relative or absolute. If it's absolute ,all locations are given
beginning from segment's start, that is, they are between  [1 .. (end\-start)].
Otherwise, they are given relative to the true start of the segment, irregardless of the start value.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 1
\&  bioperl\-l@bio.perl.org
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&  bioperl\-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl\-bugs/
.Ve
.SH "AUTHORS \- Lincoln Stein, Vsevolod (Simon) Ilyushchenko"
.IX Header "AUTHORS - Lincoln Stein, Vsevolod (Simon) Ilyushchenko"
Email lstein@cshl.edu, simonf@cshl.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "seq_id"
.IX Subsection "seq_id"
.Vb 6
\& Title   : seq_id
\& Usage   : $ref = $s\->seq_id
\& Function: return the ID of the landmark
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.Sh "start"
.IX Subsection "start"
.Vb 6
\& Title   : start
\& Usage   : $s\->start
\& Function: start of segment
\& Returns : integer
\& Args    : none
\& Status  : Public
.Ve
.PP
This is a read-only accessor for the start of the segment. 
.Sh "end"
.IX Subsection "end"
.Vb 6
\& Title   : end
\& Usage   : $s\->end
\& Function: end of segment
\& Returns : integer
\& Args    : none
\& Status  : Public
.Ve
.PP
This is a read-only accessor for the end of the segment.
.Sh "abs_start"
.IX Subsection "abs_start"
.Vb 6
\& Title   : abs_start
\& Usage   : $s\->abs_start
\& Function: start of segment
\& Returns : integer
\& Args    : none
\& Status  : Public
.Ve
.PP
Return the absolute start of the segment
.Sh "abs_end"
.IX Subsection "abs_end"
.Vb 6
\& Title   : abs_end
\& Usage   : $s\->abs_end
\& Function: end of segment
\& Returns : integer
\& Args    : none
\& Status  : Public
.Ve
.PP
Return the absolute end of the segment
.Sh "absolute"
.IX Subsection "absolute"
.Vb 7
\& Title   : absolute
\& Usage   : $s\->absolute
\& Function: whether the positions are counted from the true start of the segment
\&            or from the start value
\& Returns : boolean
\& Args    : none
\& Status  : Public
.Ve
.PP
This is a read-only accessor.
.Sh "features"
.IX Subsection "features"
.Vb 6
\& Title   : features
\& Usage   : @features = $s\->features(@args)
\& Function: get features that overlap this segment
\& Returns : a list of Bio::SeqFeatureI objects
\& Args    : see below
\& Status  : Public
.Ve
.PP
This method will find all features that intersect the segment in a
variety of ways and return a list of Bio::SeqFeatureI objects.  The
feature locations will use coordinates relative to the reference
sequence in effect at the time that \fIfeatures()\fR was called.
.PP
The returned list can be limited to certain types, attributes or
range intersection modes.  Types of range intersection are one of:
.PP
.Vb 3
\&   "overlaps"      the default
\&   "contains"      return features completely contained within the segment
\&   "contained_in"  return features that completely contain the segment
.Ve
.PP
Two types of argument lists are accepted.  In the positional argument
form, the arguments are treated as a list of feature types.  In the
named parameter form, the arguments are a series of \-name=>value
pairs.
.PP
.Vb 2
\&  Argument    Description
\&  \-\-\-\-\-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
.Vb 2
\&  \-types      An array reference to type names in the format
\&              "method:source"
.Ve
.PP
.Vb 1
\&  \-attributes A hashref containing a set of attributes to match
.Ve
.PP
.Vb 1
\&  \-rangetype  One of "overlaps", "contains", or "contained_in".
.Ve
.PP
.Vb 1
\&  \-iterator   Return an iterator across the features.
.Ve
.PP
.Vb 1
\&  \-callback   A callback to invoke on each feature
.Ve
.PP
The \-attributes argument is a hashref containing one or more
attributes to match against:
.PP
.Vb 2
\&  \-attributes => { Gene => \(aqabc\-1\(aq,
\&                   Note => \(aqconfirmed\(aq }
.Ve
.PP
Attribute matching is simple string matching, and multiple attributes
are ANDed together.  More complex filtering can be performed using the
\&\-callback option (see below).
.PP
If \-iterator is true, then the method returns an object reference that
implements the \fInext_seq()\fR method.  Each call to \fInext_seq()\fR returns a
new Bio::SeqFeatureI object.
.PP
If \-callback is passed a code reference, the code reference will be
invoked on each feature returned.  The code will be passed two
arguments consisting of the current feature and the segment object
itself, and must return a true value. If the code returns a false
value, feature retrieval will be aborted.
.PP
\&\-callback and \-iterator are mutually exclusive options.  If \-iterator
is defined, then \-callback is ignored.
.PP
\&\s-1NOTE:\s0 In his implementation, \-attributes does exactly nothing, and \fIfeatures()\fR
is wildly inefficient because it works by calling top_SeqFeatures and then
filters by position in the Perl layer, rather than filtering by position in
the \s-1SQL\s0 layer.
.Sh "top_SeqFeatures"
.IX Subsection "top_SeqFeatures"
.Vb 6
\& Title   : top_SeqFeatures
\& Usage   : $s\->top_SeqFeatures
\& Function: retrieve an array of features from the underlying BioDB object.
\& Returns : an array
\& Args    : none
\& Status  : Private
.Ve
.PP
First, make the adaptor retrieve the feature objects from the database.
Then, get the actual objects and adjust the features' locations if necessary.
.Sh "get_seq_stream"
.IX Subsection "get_seq_stream"
.Vb 6
\& Title   : get_seq_stream
\& Usage   : my $seqio = $self\->get_seq_stream(@args)
\& Function: Performs a query and returns an iterator over it
\& Returns : a Bio::SeqIO stream capable of returning Bio::Das::SegmentI objects
\& Args    : As in features()
\& Status  : public
.Ve
.PP
This routine takes the same arguments as \fIfeatures()\fR, but returns a
Bio::SeqIO::Stream\-compliant object.  Use it like this:
.PP
.Vb 4
\&  $stream = $db\->get_seq_stream(\(aqexon\(aq);
\&  while (my $exon = $stream\->next_seq) {
\&     print $exon,"\en";
\&  }
.Ve
.PP
\&\s-1NOTE:\s0 In the interface this method is aliased to \fIget_feature_stream()\fR,
as the name is more descriptive.
.Sh "seq"
.IX Subsection "seq"
.Vb 6
\& Title   : seq
\& Usage   : $s\->seq
\& Function: get the sequence string for this segment
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.PP
Returns the sequence for this segment as a Bio::PrimarySeq object.
.Sh "factory"
.IX Subsection "factory"
.Vb 6
\& Title   : factory
\& Usage   : $factory = $s\->factory
\& Function: return the segment factory
\& Returns : a Bio::DasI object
\& Args    : see below
\& Status  : Public
.Ve
.PP
This method returns a Bio::DasI object that can be used to fetch
more segments.  This is typically the Bio::DasI object from which
the segment was originally generated.
.Sh "bioseq"
.IX Subsection "bioseq"
.Vb 6
\& Title   : bioseq
\& Usage   : $bioseq = $s\->bioseq
\& Function: return the underlying Bio::Seq object
\&  Returns : a Bio::Seq object
\& Args    : none
\& Status  : Public
.Ve
.Sh "asString"
.IX Subsection "asString"
.Vb 6
\& Title   : asString
\& Usage   : $s\->asString
\& Function: human\-readable representation of the segment
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.PP
This method will return a human-readable representation of the
segment.  It is the overloaded method call for the "" operator.
.PP
Currently the format is:
.PP
.Vb 1
\&  refseq:start,stop
.Ve
